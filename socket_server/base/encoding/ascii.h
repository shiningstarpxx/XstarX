// =============================================================================
// 
//       Filename:  ascii.h
// 
//    Description:  
// 
//        Version:  1.0
//        Created:  06/10/2015 17:10:29
//       Revision:  $Id$
//       Compiler:  g++
// 
//         Author:  michaelpei (Pei Xingxin), michaelpei@tencent.com
// 
// =============================================================================
#ifndef BASE_ENCODING_ASCII_H
#define BASE_ENCODING_ASCII_H

#include <limits.h>
#include <stdint.h>

namespace soter {
namespace common {

struct Ascii {
 private:
  Ascii();
  ~Ascii();

 private:
  enum CharTypeMask {
    Upper = 1 << 0,
    Lower = 1 << 1,
    Digit = 1 << 2,
    HexDigit = 1 << 3,
    Blank = 1 << 4,
    Space = 1 << 5,
    Control = 1 << 6,
    Punct = 1 << 7,
    Print = 1 << 8,
    Graph = 1 << 9,
  };

 public:
  /* check weather c is valid ascii */
  static bool IsValid(char c) {
    return (c & 0x80) == 0;
  }

  static bool IsAlpha(char c) {
    return CharIncludeAnyTypeMask(c, Lower | Upper);
  }

  static bool IsDigit(char c) {
    return CharIncludeAnyTypeMask(c, Digit);
  }

  static bool IsAlphaNumber(char c) {
    return CharIncludeAnyTypeMask(c, Lower | Upper | Digit);
  }

  static bool IsBlank(char c) {
    return CharIncludeAnyTypeMask(c, Blank);
  }

  static bool IsControl(char c) {
    return CharIncludeAnyTypeMask(c, Control);
  }

  static inline bool IsSpace(char c) {
    return CharIncludeAnyTypeMask(c, Space);
  }

  static inline bool IsLower(char c) {
    return CharIncludeAnyTypeMask(c, Lower);
  }

  static inline bool IsUpper(char c) {
    return CharIncludeAnyTypeMask(c, Upper);
  }

  static inline bool IsPunct(char c) {
    return CharIncludeAnyTypeMask(c, Punct);
  }

  static inline bool IsGraph(char c) {
    return CharIncludeAnyTypeMask(c, Graph);
  }

  static inline bool IsHexDigit(char c) {
    return CharIncludeAnyTypeMask(c, HexDigit);
  }

  static inline bool IsPrint(char c) {
    return CharIncludeAnyTypeMask(c, Print);
  }

  static inline char ToAscii(char c) {
    return c & 0x7F;
  }

  static inline char ToLower(char c) {
    return IsUpper(c) ? c + ('a' - 'A') : c;
  }

  static inline char ToUpper(char c) {
    return IsLower(c) ? c - ('a' - 'A') : c;
  }

 private:
  static inline int GetCharTypeMask(char c) {
#if 0
    // // generated By:
    // #include <ctype.h>
    // #include <stdio.h>

    // int main()
    // {
    //     for (int i = 0; i < 128; ++i)
    //     {
    //         printf("            /* 0x%02x(%c) */ ", i, isgraph(i) ? i : ' ');
    //         if (isblank(i)) printf("Blank | ");
    //         if (isspace(i)) printf("Space | ");
    //         if (isupper(i)) printf("Upper | ");
    //         if (islower(i)) printf("Lower | ");
    //         if (isdigit(i)) printf("Digit | ");
    //         if (isxdigit(i)) printf("HexDigit | ");
    //         if (ispunct(i)) printf("Punct | ");
    //         if (iscntrl(i)) printf("Control | ");
    //         if (isgraph(i)) printf("Graph | ");
    //         if (isprint(i)) printf("Print | ");
    //         printf("0,\n");
    //     }
    // }

    // 编译后以下面的命令运行：
    // $ LC_ALL=C ./a.out
#endif
    static const uint16_t table[UCHAR_MAX + 1] = {
      /* 0x00( ) */ Control | 0,
      /* 0x01( ) */ Control | 0,
      /* 0x02( ) */ Control | 0,
      /* 0x03( ) */ Control | 0,
      /* 0x04( ) */ Control | 0,
      /* 0x05( ) */ Control | 0,
      /* 0x06( ) */ Control | 0,
      /* 0x07( ) */ Control | 0,
      /* 0x08( ) */ Control | 0,
      /* 0x09( ) */ Blank | Space | Control | 0,
      /* 0x0a( ) */ Space | Control | 0,
      /* 0x0b( ) */ Space | Control | 0,
      /* 0x0c( ) */ Space | Control | 0,
      /* 0x0d( ) */ Space | Control | 0,
      /* 0x0e( ) */ Control | 0,
      /* 0x0f( ) */ Control | 0,
      /* 0x10( ) */ Control | 0,
      /* 0x11( ) */ Control | 0,
      /* 0x12( ) */ Control | 0,
      /* 0x13( ) */ Control | 0,
      /* 0x14( ) */ Control | 0,
      /* 0x15( ) */ Control | 0,
      /* 0x16( ) */ Control | 0,
      /* 0x17( ) */ Control | 0,
      /* 0x18( ) */ Control | 0,
      /* 0x19( ) */ Control | 0,
      /* 0x1a( ) */ Control | 0,
      /* 0x1b( ) */ Control | 0,
      /* 0x1c( ) */ Control | 0,
      /* 0x1d( ) */ Control | 0,
      /* 0x1e( ) */ Control | 0,
      /* 0x1f( ) */ Control | 0,
      /* 0x20( ) */ Blank | Space | Print | 0,
      /* 0x21(!) */ Punct | Graph | Print | 0,
      /* 0x22(") */ Punct | Graph | Print | 0,
      /* 0x23(#) */ Punct | Graph | Print | 0,
      /* 0x24($) */ Punct | Graph | Print | 0,
      /* 0x25(%) */ Punct | Graph | Print | 0,
      /* 0x26(&) */ Punct | Graph | Print | 0,
      /* 0x27(') */ Punct | Graph | Print | 0,
      /* 0x28(() */ Punct | Graph | Print | 0,
      /* 0x29()) */ Punct | Graph | Print | 0,
      /* 0x2a(*) */ Punct | Graph | Print | 0,
      /* 0x2b(+) */ Punct | Graph | Print | 0,
      /* 0x2c(,) */ Punct | Graph | Print | 0,
      /* 0x2d(-) */ Punct | Graph | Print | 0,
      /* 0x2e(.) */ Punct | Graph | Print | 0,
      /* 0x2f(/) */ Punct | Graph | Print | 0,
      /* 0x30(0) */ Digit | HexDigit | Graph | Print | 0,
      /* 0x31(1) */ Digit | HexDigit | Graph | Print | 0,
      /* 0x32(2) */ Digit | HexDigit | Graph | Print | 0,
      /* 0x33(3) */ Digit | HexDigit | Graph | Print | 0,
      /* 0x34(4) */ Digit | HexDigit | Graph | Print | 0,
      /* 0x35(5) */ Digit | HexDigit | Graph | Print | 0,
      /* 0x36(6) */ Digit | HexDigit | Graph | Print | 0,
      /* 0x37(7) */ Digit | HexDigit | Graph | Print | 0,
      /* 0x38(8) */ Digit | HexDigit | Graph | Print | 0,
      /* 0x39(9) */ Digit | HexDigit | Graph | Print | 0,
      /* 0x3a(:) */ Punct | Graph | Print | 0,
      /* 0x3b(;) */ Punct | Graph | Print | 0,
      /* 0x3c(<) */ Punct | Graph | Print | 0,
      /* 0x3d(=) */ Punct | Graph | Print | 0,
      /* 0x3e(>) */ Punct | Graph | Print | 0,
      /* 0x3f(?) */ Punct | Graph | Print | 0,
      /* 0x40(@) */ Punct | Graph | Print | 0,
      /* 0x41(A) */ Upper | HexDigit | Graph | Print | 0,
      /* 0x42(B) */ Upper | HexDigit | Graph | Print | 0,
      /* 0x43(C) */ Upper | HexDigit | Graph | Print | 0,
      /* 0x44(D) */ Upper | HexDigit | Graph | Print | 0,
      /* 0x45(E) */ Upper | HexDigit | Graph | Print | 0,
      /* 0x46(F) */ Upper | HexDigit | Graph | Print | 0,
      /* 0x47(G) */ Upper | Graph | Print | 0,
      /* 0x48(H) */ Upper | Graph | Print | 0,
      /* 0x49(I) */ Upper | Graph | Print | 0,
      /* 0x4a(J) */ Upper | Graph | Print | 0,
      /* 0x4b(K) */ Upper | Graph | Print | 0,
      /* 0x4c(L) */ Upper | Graph | Print | 0,
      /* 0x4d(M) */ Upper | Graph | Print | 0,
      /* 0x4e(N) */ Upper | Graph | Print | 0,
      /* 0x4f(O) */ Upper | Graph | Print | 0,
      /* 0x50(P) */ Upper | Graph | Print | 0,
      /* 0x51(Q) */ Upper | Graph | Print | 0,
      /* 0x52(R) */ Upper | Graph | Print | 0,
      /* 0x53(S) */ Upper | Graph | Print | 0,
      /* 0x54(T) */ Upper | Graph | Print | 0,
      /* 0x55(U) */ Upper | Graph | Print | 0,
      /* 0x56(V) */ Upper | Graph | Print | 0,
      /* 0x57(W) */ Upper | Graph | Print | 0,
      /* 0x58(X) */ Upper | Graph | Print | 0,
      /* 0x59(Y) */ Upper | Graph | Print | 0,
      /* 0x5a(Z) */ Upper | Graph | Print | 0,
      /* 0x5b([) */ Punct | Graph | Print | 0,
      /* 0x5c(\) */ Punct | Graph | Print | 0,
      /* 0x5d(]) */ Punct | Graph | Print | 0,
      /* 0x5e(^) */ Punct | Graph | Print | 0,
      /* 0x5f(_) */ Punct | Graph | Print | 0,
      /* 0x60(`) */ Punct | Graph | Print | 0,
      /* 0x61(a) */ Lower | HexDigit | Graph | Print | 0,
      /* 0x62(b) */ Lower | HexDigit | Graph | Print | 0,
      /* 0x63(c) */ Lower | HexDigit | Graph | Print | 0,
      /* 0x64(d) */ Lower | HexDigit | Graph | Print | 0,
      /* 0x65(e) */ Lower | HexDigit | Graph | Print | 0,
      /* 0x66(f) */ Lower | HexDigit | Graph | Print | 0,
      /* 0x67(g) */ Lower | Graph | Print | 0,
      /* 0x68(h) */ Lower | Graph | Print | 0,
      /* 0x69(i) */ Lower | Graph | Print | 0,
      /* 0x6a(j) */ Lower | Graph | Print | 0,
      /* 0x6b(k) */ Lower | Graph | Print | 0,
      /* 0x6c(l) */ Lower | Graph | Print | 0,
      /* 0x6d(m) */ Lower | Graph | Print | 0,
      /* 0x6e(n) */ Lower | Graph | Print | 0,
      /* 0x6f(o) */ Lower | Graph | Print | 0,
      /* 0x70(p) */ Lower | Graph | Print | 0,
      /* 0x71(q) */ Lower | Graph | Print | 0,
      /* 0x72(r) */ Lower | Graph | Print | 0,
      /* 0x73(s) */ Lower | Graph | Print | 0,
      /* 0x74(t) */ Lower | Graph | Print | 0,
      /* 0x75(u) */ Lower | Graph | Print | 0,
      /* 0x76(v) */ Lower | Graph | Print | 0,
      /* 0x77(w) */ Lower | Graph | Print | 0,
      /* 0x78(x) */ Lower | Graph | Print | 0,
      /* 0x79(y) */ Lower | Graph | Print | 0,
      /* 0x7a(z) */ Lower | Graph | Print | 0,
      /* 0x7b({) */ Punct | Graph | Print | 0,
      /* 0x7c(|) */ Punct | Graph | Print | 0,
      /* 0x7d(}) */ Punct | Graph | Print | 0,
      /* 0x7e(~) */ Punct | Graph | Print | 0,
      /* 0x7f( ) */ Control | 0,
      // 以下全为 0
    };
    return table[static_cast<unsigned char>(c)];
  }

  static bool CharIncludeAnyTypeMask(char c, int mask) {
    return (GetCharTypeMask(c) & mask) != 0;
  }
};

}  // namespace common
}  // namespace soter

#endif
